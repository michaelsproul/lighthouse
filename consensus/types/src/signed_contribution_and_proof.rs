use super::{
    ChainSpec, ContributionAndProof, Domain, EthSpec, Fork, Hash256, PublicKey, SecretKey,
    Signature, SignedRoot, SyncCommitteeContribution, SyncSelectionProof,
};
use crate::test_utils::TestRandom;
use serde_derive::{Deserialize, Serialize};
use ssz_derive::{Decode, Encode};
use test_random_derive::TestRandom;
use tree_hash_derive::TreeHash;

/// A Validators signed aggregate proof to publish on the `beacon_aggregate_and_proof`
/// gossipsub topic.
///
/// Spec v0.12.1
#[cfg_attr(feature = "arbitrary-fuzz", derive(arbitrary::Arbitrary))]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Encode, Decode, TestRandom, TreeHash)]
#[serde(bound = "T: EthSpec")]
pub struct SignedContributionAndProof<T: EthSpec> {
    /// The `ContributionAndProof` that was signed.
    pub message: ContributionAndProof<T>,
    /// The aggregate attestation.
    pub signature: Signature,
}

impl<T: EthSpec> SignedContributionAndProof<T> {
    /// Produces a new `SignedContributionAndProof` with a `selection_proof` generated by signing
    /// `aggregate.data.slot` with `secret_key`.
    ///
    /// If `selection_proof.is_none()` it will be computed locally.
    pub fn from_aggregate(
        aggregator_index: u64,
        contribution: SyncCommitteeContribution<T>,
        selection_proof: Option<SyncSelectionProof>,
        secret_key: &SecretKey,
        fork: &Fork,
        genesis_validators_root: Hash256,
        spec: &ChainSpec,
    ) -> Self {
        let message = ContributionAndProof::from_aggregate(
            aggregator_index,
            contribution,
            selection_proof,
            secret_key,
            fork,
            genesis_validators_root,
            spec,
        );

        let target_epoch = message.contribution.slot.epoch(T::slots_per_epoch());
        let domain = spec.get_domain(
            target_epoch,
            Domain::ContributionAndProof,
            fork,
            genesis_validators_root,
        );
        let signing_message = message.signing_root(domain);

        SignedContributionAndProof {
            message,
            signature: secret_key.sign(signing_message),
        }
    }

    /// Verifies the signature of the `ContributionAndProof`
    pub fn is_valid_signature(
        &self,
        validator_pubkey: &PublicKey,
        fork: &Fork,
        genesis_validators_root: Hash256,
        spec: &ChainSpec,
    ) -> bool {
        let target_epoch = self.message.contribution.slot.epoch(T::slots_per_epoch());
        let domain = spec.get_domain(
            target_epoch,
            Domain::ContributionAndProof,
            fork,
            genesis_validators_root,
        );
        let message = self.message.signing_root(domain);
        self.signature.verify(validator_pubkey, message)
    }

    /// Verifies the signature of the `ContributionAndProof` as well the underlying selection_proof in
    /// the contained `ContributionAndProof`.
    pub fn is_valid(
        &self,
        validator_pubkey: &PublicKey,
        fork: &Fork,
        genesis_validators_root: Hash256,
        spec: &ChainSpec,
    ) -> bool {
        self.is_valid_signature(validator_pubkey, fork, genesis_validators_root, spec)
            && self.message.is_valid_selection_proof(
                validator_pubkey,
                fork,
                genesis_validators_root,
                spec,
            )
    }
}
